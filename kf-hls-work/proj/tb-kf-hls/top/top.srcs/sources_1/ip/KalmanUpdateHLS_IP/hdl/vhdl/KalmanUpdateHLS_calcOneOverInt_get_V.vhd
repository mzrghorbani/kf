-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity KalmanUpdateHLS_calcOneOverInt_get_V_rom is 
    generic(
             dwidth     : integer := 9; 
             awidth     : integer := 9; 
             mem_size    : integer := 257
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of KalmanUpdateHLS_calcOneOverInt_get_V_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "100000000", 1 => "011111111", 2 => "011111110", 3 => "011111101", 
    4 => "011111100", 5 => "011111011", 6 => "011111010", 7 => "011111001", 
    8 => "011111000", 9 => "011110111", 10 => "011110110", 11 => "011110101", 
    12 => "011110100", 13 => "011110011", 14 => "011110010", 15 => "011110001", 
    16 to 17=> "011110000", 18 => "011101111", 19 => "011101110", 20 => "011101101", 
    21 => "011101100", 22 => "011101011", 23 to 24=> "011101010", 25 => "011101001", 
    26 => "011101000", 27 => "011100111", 28 => "011100110", 29 to 30=> "011100101", 
    31 => "011100100", 32 => "011100011", 33 => "011100010", 34 to 35=> "011100001", 
    36 => "011100000", 37 => "011011111", 38 to 39=> "011011110", 40 => "011011101", 
    41 => "011011100", 42 to 43=> "011011011", 44 => "011011010", 45 to 46=> "011011001", 
    47 => "011011000", 48 => "011010111", 49 to 50=> "011010110", 51 => "011010101", 
    52 to 53=> "011010100", 54 => "011010011", 55 to 56=> "011010010", 57 => "011010001", 
    58 to 59=> "011010000", 60 => "011001111", 61 to 62=> "011001110", 63 => "011001101", 
    64 to 65=> "011001100", 66 => "011001011", 67 to 68=> "011001010", 69 to 70=> "011001001", 
    71 => "011001000", 72 to 73=> "011000111", 74 => "011000110", 75 to 76=> "011000101", 
    77 to 78=> "011000100", 79 to 80=> "011000011", 81 => "011000010", 82 to 83=> "011000001", 
    84 to 85=> "011000000", 86 to 87=> "010111111", 88 => "010111110", 89 to 90=> "010111101", 
    91 to 92=> "010111100", 93 to 94=> "010111011", 95 to 96=> "010111010", 97 to 98=> "010111001", 
    99 to 100=> "010111000", 101 to 102=> "010110111", 103 to 104=> "010110110", 105 to 106=> "010110101", 
    107 to 108=> "010110100", 109 to 110=> "010110011", 111 to 112=> "010110010", 113 to 114=> "010110001", 
    115 to 116=> "010110000", 117 to 118=> "010101111", 119 to 120=> "010101110", 121 to 122=> "010101101", 
    123 to 125=> "010101100", 126 to 127=> "010101011", 128 to 129=> "010101010", 130 to 131=> "010101001", 
    132 to 134=> "010101000", 135 to 136=> "010100111", 137 to 138=> "010100110", 139 to 141=> "010100101", 
    142 to 143=> "010100100", 144 to 146=> "010100011", 147 to 148=> "010100010", 149 to 151=> "010100001", 
    152 to 153=> "010100000", 154 to 156=> "010011111", 157 to 158=> "010011110", 159 to 161=> "010011101", 
    162 to 164=> "010011100", 165 to 166=> "010011011", 167 to 169=> "010011010", 170 to 172=> "010011001", 
    173 to 175=> "010011000", 176 to 178=> "010010111", 179 to 180=> "010010110", 181 to 183=> "010010101", 
    184 to 186=> "010010100", 187 to 189=> "010010011", 190 to 192=> "010010010", 193 to 195=> "010010001", 
    196 to 199=> "010010000", 200 to 202=> "010001111", 203 to 205=> "010001110", 206 to 208=> "010001101", 
    209 to 212=> "010001100", 213 to 215=> "010001011", 216 to 218=> "010001010", 219 to 222=> "010001001", 
    223 to 225=> "010001000", 226 to 229=> "010000111", 230 to 233=> "010000110", 234 to 236=> "010000101", 
    237 to 240=> "010000100", 241 to 244=> "010000011", 245 to 248=> "010000010", 249 to 252=> "010000001", 
    253 to 255=> "010000000", 256 => "000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity KalmanUpdateHLS_calcOneOverInt_get_V is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 257;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of KalmanUpdateHLS_calcOneOverInt_get_V is
    component KalmanUpdateHLS_calcOneOverInt_get_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    KalmanUpdateHLS_calcOneOverInt_get_V_rom_U :  component KalmanUpdateHLS_calcOneOverInt_get_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


